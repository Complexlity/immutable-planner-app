'use client'

import { useMyContext } from "@/store/passportStore";
import { passport } from "@imtbl/sdk";
import Head from "next/head";
import Script from "next/script";
import { useState, useEffect } from 'react';

export default function NavButton() {
  const [count, setCount] = useState(0)
  const { setProviderState: setProvider, providerState: provider ,passportState: passportInstance, setPassportState, } = useMyContext();
  const clientId = process.env.NEXT_PUBLIC_CLIENT_ID
  console.log(clientId)
  console.log(passportInstance)
  const [buttonState, setButtonState] = useState('Connect Passport')
  const [isLoading, setIsLoading] = useState(false)

  const [user, setUser] = useState(null)


  async function login() {
    if (!passportInstance) return
    console.log("I am here")
    setButtonState("...Connecting")
    setIsLoading(true)
    let provider = await passportInstance.connectImxSilent()
    console.log("provider after silent connect", provider);
    if (!provider) {
      try {
        console.log("I am connecting now")
        provider = await passportInstance.connectImx()
      }

      catch (error) {
        console.log("Something went wrong")
        console.log({ error })
        setButtonState('Connect Passport')
        throw error
      }
      finally {
        setIsLoading(false)

      }
    }
    setProvider(provider)
    setButtonState('Connected')
    return
  }

  async function logout()  {
    await passportInstance.logout();
    setButtonState('Connect Passport')
}



  useEffect(() => {
    async function getUser(){
  const user = await passportInstance.getUserInfo()
      setUser(user)
}
    if (provider) {
      getUser()
    }
  }, [provider])



  return (
 <>

<Head>
        <title>Immutable Planner App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <Script>
          {`
      if (typeof global === 'undefined') {
				window.global = window;
			}

			if (typeof process === 'undefined') {
				window.process = { env: { NODE_ENV: 'production' } };
			}
		`}
</Script>
      </Head>
      <div className="fixed flex justify-end px-4 gap-4 top-0 backdrop-blur-md py-4   w-full">

          {
            buttonState === 'Connected'
            ?
            <>
            {provider != null
              ?
            <>
              <p className="px-4 py-2 bg-teal-600 rounded-lg text-gray-200 flex items-center justify-center">{provider.user.profile.email} </p>
                  <p className="px-4 py-2 bg-teal-600 rounded-lg text-gray-200 flex items-center justify-center">{provider.user.imx.ethAddress }</p>
                </>
                : null
            }
            <button onClick={logout} className="bg-red-500 text-grey-800 px-4 py-2 opacity-100 rounded-full text-lg  text-gray-100">Logout</button>
            </>
            : <button disabled={isLoading} className={`text-grey-100 px-4 py-2 opacity-100 rounded-full ${isLoading ? "bg-green-200" : "bg-green-500" }`} onClick={login}>
          {buttonState}
        </button>
          }

        </div>
        {/* <p>{JSON.stringify(providerState) ?? "Null"}</p> */}

      </>


  );
}


